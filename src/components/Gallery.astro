---
import { MEDIA_BASE_URL } from '../config/media';
import Lightbox from './Lightbox.astro';

export interface Props {
  media: Array<{
    type: 'image' | 'video' | 'gif';
    src: string;
    alt: string;
    caption?: string;
  }>;
  orientation?: 'landscape' | 'portrait';
  lightboxId?: string;
}

const { media = [], orientation = 'landscape', lightboxId = 'gallery-lightbox' } = Astro.props;

// Helper function to get the full media URL
function getMediaUrl(src: string): string {
  // If src already starts with http or is a full URL, return as-is
  if (src.startsWith('http') || src.startsWith('//')) {
    return src;
  }
  // If src starts with /astro-portfolio/assets, replace with MEDIA_BASE_URL
  if (src.startsWith('/astro-portfolio/assets')) {
    return src.replace('/astro-portfolio/assets', MEDIA_BASE_URL);
  }
  // Otherwise, prepend MEDIA_BASE_URL
  return `${MEDIA_BASE_URL}${src.startsWith('/') ? '' : '/'}${src}`;
}
---

<div class="project-media" data-lightbox-container={lightboxId}>
  <div class={`gallery-grid ${orientation}`}>
    {media.map((item, index) => {
      const mediaUrl = getMediaUrl(item.src);
      return (
        <div class="gallery-item" data-index={index} data-type={item.type} data-src={mediaUrl} data-alt={item.alt}>
          {item.type === 'video' ? (
            <video 
              src={mediaUrl} 
              controls 
              muted
              onmouseover="this.play()"
              onmouseout="this.pause()"
            >
              Your browser does not support the video tag.
            </video>
          ) : (
            <img src={mediaUrl} alt={item.alt} />
          )}
          {item.caption && <div class={`media-caption ${item.type === 'video' ? 'caption-top' : 'caption-bottom'}`}>{item.caption}</div>}
        </div>
      );
    })}
  </div>

  <!-- Lightbox Modal -->
  <Lightbox id={lightboxId} />
</div>

<script is:inline define:vars={{ lightboxId }}>
  // Initialize gallery component
  document.addEventListener('DOMContentLoaded', function() {
    // Find all gallery containers with this specific lightbox ID
    const containers = document.querySelectorAll(`[data-lightbox-container="${lightboxId}"]`);
    
    containers.forEach(container => {
      // Add click listeners to gallery items in this container
      const galleryItems = container.querySelectorAll('.gallery-item');
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', function() {
          const type = this.dataset.type;
          const src = this.dataset.src;
          const alt = this.dataset.alt;
          
          // Build media array from all gallery items in this container
          const allMedia = Array.from(container.querySelectorAll('.gallery-item')).map((item, i) => {
            const img = item.querySelector('img');
            const video = item.querySelector('video');
            const caption = item.querySelector('.media-caption');
            
            if (img) {
              return {
                type: 'image',
                src: img.src,
                alt: img.alt,
                caption: caption ? caption.textContent : ''
              };
            } else if (video) {
              return {
                type: 'video',
                src: video.src,
                alt: video.alt || '',
                caption: caption ? caption.textContent : ''
              };
            }
            return null;
          }).filter(Boolean);
          
          // Use the global lightbox function
          if (window[`openLightbox_${lightboxId}`]) {
            window[`openLightbox_${lightboxId}`](type, src, alt, index, allMedia);
          }
        });
      });
    });
  });
</script>

<style>
  .project-media {
    margin: 2rem 0;
  }


  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .gallery-grid.portrait {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  .gallery-grid.portrait .gallery-item {
    aspect-ratio: 3/4;
  }
  
  .gallery-grid.portrait .gallery-item img,
  .gallery-grid.portrait .gallery-item video {
    object-fit: cover;
    height: 100%;
  }

  .gallery-item {
    position: relative;
    cursor: pointer;
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-item img,
  .gallery-item video {
    width: 100%;
    height: 250px;
    object-fit: cover;
    display: block;
  }

  .media-caption {
    position: absolute;
    left: 0;
    right: 0;
    color: white;
    padding: 1rem;
    margin: 0;
    font-size: 0.9rem;
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: 2;
  }

  .caption-top {
    top: 0;
    background: linear-gradient(rgba(0, 0, 0, 0.8), transparent);
  }

  .caption-bottom {
    bottom: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
  }

  .gallery-item:hover .media-caption {
    opacity: 1;
  }


  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
    
    .gallery-grid.portrait {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }

  }
</style>
