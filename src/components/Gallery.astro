---
import { MEDIA_BASE_URL } from '../config/media';

export interface Props {
  media: Array<{
    type: 'image' | 'video' | 'gif';
    src: string;
    alt: string;
    caption?: string;
  }>;
  orientation?: 'landscape' | 'portrait';
}

const { media = [], orientation = 'landscape' } = Astro.props;

// Helper function to get the full media URL
function getMediaUrl(src: string): string {
  // If src already starts with http or is a full URL, return as-is
  if (src.startsWith('http') || src.startsWith('//')) {
    return src;
  }
  // If src starts with /astro-portfolio/assets, replace with MEDIA_BASE_URL
  if (src.startsWith('/astro-portfolio/assets')) {
    return src.replace('/astro-portfolio/assets', MEDIA_BASE_URL);
  }
  // Otherwise, prepend MEDIA_BASE_URL
  return `${MEDIA_BASE_URL}${src.startsWith('/') ? '' : '/'}${src}`;
}
---

<div class="project-media">
  <div class={`gallery-grid ${orientation}`}>
    {media.map((item, index) => {
      const mediaUrl = getMediaUrl(item.src);
      return (
        <div class="gallery-item" data-index={index} data-type={item.type} data-src={mediaUrl} data-alt={item.alt}>
          {item.type === 'video' ? (
            <video 
              src={mediaUrl} 
              controls 
              muted
              onmouseover="this.play()"
              onmouseout="this.pause()"
            >
              Your browser does not support the video tag.
            </video>
          ) : (
            <img src={mediaUrl} alt={item.alt} />
          )}
          {item.caption && <div class={`media-caption ${item.type === 'video' ? 'caption-top' : 'caption-bottom'}`}>{item.caption}</div>}
        </div>
      );
    })}
  </div>

  <!-- Lightbox Modal -->
  <div class="lightbox" data-gallery-lightbox>
    <div class="lightbox-content">
      <button class="lightbox-close">&times;</button>
      <button class="lightbox-prev">&lt;</button>
      <button class="lightbox-next">&gt;</button>
      <div class="lightbox-media">
        <img class="lightbox-image" style="display: none;" />
        <video class="lightbox-video" style="display: none;" controls autoplay muted playsinline></video>
      </div>
      <div class="lightbox-caption"></div>
    </div>
  </div>
</div>

<script is:inline>
  // Initialize each gallery component independently
  document.addEventListener('DOMContentLoaded', function() {
    // Find all gallery components
    const galleryContainers = document.querySelectorAll('.project-media');
    
    galleryContainers.forEach((container, containerIndex) => {
      let currentMediaIndex = 0;
      let allMedia = [];
      const lightbox = container.querySelector('[data-gallery-lightbox]');
      
      if (!lightbox) return;
      
      const lightboxImage = lightbox.querySelector('.lightbox-image');
      const lightboxVideo = lightbox.querySelector('.lightbox-video');
      const lightboxCaption = lightbox.querySelector('.lightbox-caption');
      
      function openLightbox(type, src, alt, index) {
        currentMediaIndex = index;
        allMedia = Array.from(container.querySelectorAll('.gallery-item')).map((item, i) => {
          const img = item.querySelector('img');
          const video = item.querySelector('video');
          const caption = item.querySelector('.media-caption');
          
          if (img) {
            return {
              type: 'image',
              src: img.src,
              alt: img.alt,
              caption: caption ? caption.textContent : ''
            };
          } else if (video) {
            return {
              type: 'video',
              src: video.src,
              alt: video.alt || '',
              caption: caption ? caption.textContent : ''
            };
          }
          return null;
        }).filter(Boolean);
        
        if (type === 'image') {
          lightboxImage.src = src;
          lightboxImage.alt = alt;
          lightboxImage.style.display = 'block';
          lightboxVideo.style.display = 'none';
        } else {
          lightboxVideo.src = src;
          lightboxVideo.style.display = 'block';
          lightboxImage.style.display = 'none';
          // Autoplay video when lightbox opens
          lightboxVideo.play().catch(error => {
            console.log('Video autoplay failed:', error);
          });
        }
        
        lightboxCaption.textContent = allMedia[index]?.caption || '';
        lightbox.style.display = 'flex';
      }
      
      function closeLightbox() {
        lightbox.style.display = 'none';
      }
      
      function showPrev() {
        if (currentMediaIndex > 0) {
          currentMediaIndex--;
          const media = allMedia[currentMediaIndex];
          openLightbox(media.type, media.src, media.alt, currentMediaIndex);
        }
      }
      
      function showNext() {
        if (currentMediaIndex < allMedia.length - 1) {
          currentMediaIndex++;
          const media = allMedia[currentMediaIndex];
          openLightbox(media.type, media.src, media.alt, currentMediaIndex);
        }
      }
      
      // Add click listeners to gallery items
      const galleryItems = container.querySelectorAll('.gallery-item');
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', function() {
          const type = this.dataset.type;
          const src = this.dataset.src;
          const alt = this.dataset.alt;
          openLightbox(type, src, alt, index);
        });
      });
      
      // Add button listeners
      const lightboxClose = lightbox.querySelector('.lightbox-close');
      const lightboxPrev = lightbox.querySelector('.lightbox-prev');
      const lightboxNext = lightbox.querySelector('.lightbox-next');
      
      if (lightboxClose) {
        lightboxClose.addEventListener('click', closeLightbox);
      }
      if (lightboxPrev) {
        lightboxPrev.addEventListener('click', showPrev);
      }
      if (lightboxNext) {
        lightboxNext.addEventListener('click', showNext);
      }
      
      // Close on background click
      lightbox.addEventListener('click', function(e) {
        if (e.target === this) {
          closeLightbox();
        }
      });
      
      // Keyboard navigation (global but scoped to this lightbox)
      document.addEventListener('keydown', function(e) {
        if (lightbox.style.display === 'flex') {
          if (e.key === 'Escape') {
            closeLightbox();
          } else if (e.key === 'ArrowLeft') {
            showPrev();
          } else if (e.key === 'ArrowRight') {
            showNext();
          }
        }
      });
    });
  });
</script>

<style>
  .project-media {
    margin: 2rem 0;
  }


  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .gallery-grid.portrait {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  .gallery-grid.portrait .gallery-item {
    aspect-ratio: 3/4;
  }
  
  .gallery-grid.portrait .gallery-item img,
  .gallery-grid.portrait .gallery-item video {
    object-fit: cover;
    height: 100%;
  }

  .gallery-item {
    position: relative;
    cursor: pointer;
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-item img,
  .gallery-item video {
    width: 100%;
    height: 250px;
    object-fit: cover;
    display: block;
  }

  .media-caption {
    position: absolute;
    left: 0;
    right: 0;
    color: white;
    padding: 1rem;
    margin: 0;
    font-size: 0.9rem;
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: 2;
  }

  .caption-top {
    top: 0;
    background: linear-gradient(rgba(0, 0, 0, 0.8), transparent);
  }

  .caption-bottom {
    bottom: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
  }

  .gallery-item:hover .media-caption {
    opacity: 1;
  }

  /* Lightbox Styles */
  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
  }

  .lightbox-media img,
  .lightbox-media video {
    max-width: 100%;
    max-height: 80vh;
    object-fit: contain;
  }

  .lightbox-close,
  .lightbox-prev,
  .lightbox-next {
    position: absolute;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-close {
    top: -60px;
    right: 0;
  }

  .lightbox-prev {
    left: -60px;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-next {
    right: -60px;
    top: 50%;
    transform: translateY(-50%);
  }

  .lightbox-caption {
    color: white;
    text-align: center;
    margin-top: 1rem;
    font-size: 1rem;
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
    
    .gallery-grid.portrait {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }

    .lightbox-prev,
    .lightbox-next {
      display: none;
    }
  }
</style>
