---
import { MEDIA_BASE_URL } from '../config/media';
import Lightbox from './Lightbox.astro';

export interface Props {
  src: string;
  alt: string;
  caption?: string;
  width?: string;
  height?: string;
  lightboxId?: string;
}

const { src, alt, caption, width = "100%", height = "auto", lightboxId = 'centered-image-lightbox' } = Astro.props;

// Helper function to get the full media URL
function getMediaUrl(src: string): string {
  // If src already starts with http or is a full URL, return as-is
  if (src.startsWith('http') || src.startsWith('//')) {
    return src;
  }
  // If src starts with /astro-portfolio/assets, replace with MEDIA_BASE_URL
  if (src.startsWith('/astro-portfolio/assets')) {
    return src.replace('/astro-portfolio/assets', MEDIA_BASE_URL);
  }
  // Otherwise, prepend MEDIA_BASE_URL
  return `${MEDIA_BASE_URL}${src.startsWith('/') ? '' : '/'}${src}`;
}

// Determine if the file is a video based on extension
const isVideo = (src: string) => {
  const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.ogg'];
  return videoExtensions.some(ext => src.toLowerCase().endsWith(ext));
};

const mediaType = isVideo(src) ? 'video' : 'image';
const mediaUrl = getMediaUrl(src);
---

<div class="centered-media">
  {mediaType === 'video' ? (
    <video 
      src={mediaUrl} 
      controls
      muted
      preload="metadata"
      onmouseover="this.play()"
      onmouseout="this.pause()"
      style={`width: ${width}; height: ${height};`}
      class="centered-media-item"
      data-type="video"
      data-src={mediaUrl}
      data-alt={alt}
      data-caption={caption || ''}
    >
      <p>Your browser doesn't support HTML5 video. <a href={mediaUrl}>Download the video</a> instead.</p>
    </video>
  ) : (
    <img 
      src={mediaUrl} 
      alt={alt}
      style={`width: ${width}; height: ${height};`}
      class="centered-media-item"
      data-type="image"
      data-src={mediaUrl}
      data-alt={alt}
      data-caption={caption || ''}
    />
  )}
  {caption && <p class="media-caption">{caption}</p>}
  
  <!-- Lightbox Modal -->
  <Lightbox id={lightboxId} />
</div>

<style>
  .centered-media {
    text-align: center;
    margin: 2rem 0;
    max-width: 100%;
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
  }

  .centered-media img,
  .centered-media video {
    max-width: 100%;
    max-height: 80vh; /* Limit height to 80% of viewport height */
    width: auto;
    height: auto;
    border-radius: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    transition: transform 0.2s ease;
    object-fit: contain; /* Maintain aspect ratio while fitting within container */
    cursor: pointer;
  }

  .centered-media img:hover,
  .centered-media video:hover {
    transform: scale(1.02);
  }

  .centered-media video {
    background-color: #000;
  }

  .media-caption {
    margin-top: 0.5rem;
    color: #cccccc;
    font-size: 0.9rem;
    font-style: italic;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 768px) {
    .centered-media {
      margin: 1.5rem 0;
    }
    
    .centered-media img,
    .centered-media video {
      max-height: 70vh; /* Slightly smaller on mobile */
    }
  }

  @media (max-width: 480px) {
    .centered-media img,
    .centered-media video {
      max-height: 60vh; /* Even smaller on very small screens */
    }
  }
</style>

<script is:inline define:vars={{ lightboxId }}>
  // Initialize centered image lightbox
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('.centered-media');
    if (!container) return;
    
    const mediaItem = container.querySelector('.centered-media-item');
    if (!mediaItem) return;
    
    mediaItem.addEventListener('click', function() {
      const type = this.dataset.type;
      const src = this.dataset.src;
      const alt = this.dataset.alt;
      const caption = this.dataset.caption;
      
      // Create media array with single item
      const allMedia = [{
        type: type,
        src: src,
        alt: alt,
        caption: caption
      }];
      
      // Use the global lightbox function
      if (window[`openLightbox_${lightboxId}`]) {
        window[`openLightbox_${lightboxId}`](type, src, alt, 0, allMedia);
      }
    });
  });
</script>
